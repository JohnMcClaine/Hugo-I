"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ —Å–∞–π—Ç–µ DemoQA.com
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –∫–Ω–æ–ø–∫–∏, —Ñ–æ—Ä–º—ã –∏ —Ç.–¥.
"""

import os
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è WebDriverManager
os.environ['WDM_SSL_VERIFY'] = '0'

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
SCREENSHOTS_DIR = "ui_test_screenshots"
os.makedirs(SCREENSHOTS_DIR, exist_ok=True)


class DemoQAUITest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ DemoQA"""

    def __init__(self):
        self.driver = None
        self.wait = None
        self.base_url = "https://demoqa.com"
        self.test_results = []

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞"""
        options = Options()
        options.add_argument("--start-maximized")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)

        # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        options.add_argument(f"--user-agent={random.choice(user_agents)}")

        try:
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=options)
            self.wait = WebDriverWait(self.driver, 10)

            # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    def take_screenshot(self, name):
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        if self.driver:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"{name}_{timestamp}.png"
            filepath = os.path.join(SCREENSHOTS_DIR, filename)
            self.driver.save_screenshot(filepath)
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath
        return None

    def check_element_exists(self, locator, element_name, timeout=5):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located(locator)
            )
            print(f"‚úÖ {element_name}: –Ω–∞–π–¥–µ–Ω")
            self.test_results.append(f"‚úÖ {element_name}: PASS")
            return element
        except TimeoutException:
            print(f"‚ùå {element_name}: –ù–ï –Ω–∞–π–¥–µ–Ω")
            self.test_results.append(f"‚ùå {element_name}: FAIL")
            return None

    def check_element_clickable(self, locator, element_name, timeout=5):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.element_to_be_clickable(locator)
            )
            print(f"‚úÖ {element_name}: –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π")
            self.test_results.append(f"‚úÖ {element_name} (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π): PASS")
            return element
        except TimeoutException:
            print(f"‚ùå {element_name}: –ù–ï –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π")
            self.test_results.append(f"‚ùå {element_name} (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π): FAIL")
            return None

    def check_text_content(self, locator, element_name, expected_text=None):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            element = self.wait.until(EC.presence_of_element_located(locator))
            actual_text = element.text.strip()

            if expected_text:
                if expected_text.lower() in actual_text.lower():
                    print(f"‚úÖ {element_name}: —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ('{actual_text}')")
                    self.test_results.append(f"‚úÖ {element_name} —Ç–µ–∫—Å—Ç: PASS")
                else:
                    print(f"‚ùå {element_name}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç. –û–∂–∏–¥–∞–ª–∏: '{expected_text}', –ø–æ–ª—É—á–∏–ª–∏: '{actual_text}'")
                    self.test_results.append(f"‚ùå {element_name} —Ç–µ–∫—Å—Ç: FAIL")
            else:
                print(f"‚úÖ {element_name}: —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç ('{actual_text}')")
                self.test_results.append(f"‚úÖ {element_name} —Ç–µ–∫—Å—Ç: PASS")

            return actual_text

        except Exception as e:
            print(f"‚ùå {element_name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞ - {e}")
            self.test_results.append(f"‚ùå {element_name} —Ç–µ–∫—Å—Ç: FAIL")
            return None

    def test_homepage_elements(self):
        """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        print("\nüè† === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ===")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.driver.get(self.base_url)
        time.sleep(2)
        self.take_screenshot("01_homepage_loaded")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_title = self.driver.title
        if "DEMOQA" in page_title.upper():
            print(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ('{page_title}')")
            self.test_results.append("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: PASS")
        else:
            print(f"‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ('{page_title}')")
            self.test_results.append("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: FAIL")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–æ—Ç–∏–ø/–≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        logo_selectors = [
            (By.XPATH, "//img[contains(@src, 'Toolsqa')]"),
            (By.CSS_SELECTOR, "header img"),
            (By.XPATH, "//a[contains(@href, 'demoqa')]//img")
        ]

        logo_found = False
        for selector in logo_selectors:
            if self.check_element_exists(selector, "–õ–æ–≥–æ—Ç–∏–ø —Å–∞–π—Ç–∞", timeout=3):
                logo_found = True
                break

        if not logo_found:
            print("‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        categories = [
            (By.XPATH, "//h5[text()='Elements']", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'Elements'"),
            (By.XPATH, "//h5[text()='Forms']", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'Forms'"),
            (By.XPATH, "//h5[text()='Alerts, Frame & Windows']", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'Alerts, Frame & Windows'"),
            (By.XPATH, "//h5[text()='Widgets']", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'Widgets'"),
            (By.XPATH, "//h5[text()='Interactions']", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'Interactions'"),
            (By.XPATH, "//h5[text()='Book Store Application']", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'Book Store Application'")
        ]

        for locator, name in categories:
            self.check_element_exists(locator, name)
            self.check_element_clickable(locator, name)

        self.take_screenshot("02_homepage_elements_checked")

    def test_elements_page(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Elements"""
        print("\nüìù === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–ê–ù–ò–¶–´ ELEMENTS ===")

        # –ö–ª–∏–∫–∞–µ–º –Ω–∞ Elements
        try:
            elements_card = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//h5[text()='Elements']"))
            )
            elements_card.click()
            time.sleep(2)
            self.take_screenshot("03_elements_page_loaded")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
            menu_items = [
                (By.XPATH, "//span[text()='Text Box']", "Text Box"),
                (By.XPATH, "//span[text()='Check Box']", "Check Box"),
                (By.XPATH, "//span[text()='Radio Button']", "Radio Button"),
                (By.XPATH, "//span[text()='Web Tables']", "Web Tables"),
                (By.XPATH, "//span[text()='Buttons']", "Buttons"),
                (By.XPATH, "//span[text()='Links']", "Links"),
                (By.XPATH, "//span[text()='Upload and Download']", "Upload and Download")
            ]

            for locator, name in menu_items:
                self.check_element_exists(locator, f"–ü—É–Ω–∫—Ç –º–µ–Ω—é '{name}'")
                self.check_element_clickable(locator, f"–ü—É–Ω–∫—Ç –º–µ–Ω—é '{name}'")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Elements: {e}")
            self.test_results.append("‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Elements: FAIL")

    def test_text_box_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Text Box"""
        print("\nüìÑ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TEXT BOX ===")

        try:
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ Text Box
            text_box_menu = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//span[text()='Text Box']"))
            )
            text_box_menu.click()
            time.sleep(2)
            self.take_screenshot("04_text_box_page")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
            form_elements = [
                (By.ID, "userName", "–ü–æ–ª–µ 'Full Name'"),
                (By.ID, "userEmail", "–ü–æ–ª–µ 'Email'"),
                (By.ID, "currentAddress", "–ü–æ–ª–µ 'Current Address'"),
                (By.ID, "permanentAddress", "–ü–æ–ª–µ 'Permanent Address'"),
                (By.ID, "submit", "–ö–Ω–æ–ø–∫–∞ 'Submit'")
            ]

            for locator, name in form_elements:
                self.check_element_exists(locator, name)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É Submit –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å
            self.check_element_clickable((By.ID, "submit"), "–ö–Ω–æ–ø–∫–∞ 'Submit'")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            test_data = {
                "userName": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "userEmail": "test@example.com",
                "currentAddress": "–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1",
                "permanentAddress": "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, —É–ª. –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è, –¥. 2"
            }

            for field_id, value in test_data.items():
                try:
                    field = self.driver.find_element(By.ID, field_id)
                    field.clear()
                    field.send_keys(value)
                    print(f"‚úÖ –ü–æ–ª–µ '{field_id}': –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '{value}'")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è '{field_id}': {e}")

            time.sleep(1)
            self.take_screenshot("05_text_box_filled")

            # –ù–∞–∂–∏–º–∞–µ–º Submit
            submit_btn = self.driver.find_element(By.ID, "submit")
            self.driver.execute_script("arguments[0].scrollIntoView(true);", submit_btn)
            time.sleep(1)
            submit_btn.click()
            time.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                output = self.wait.until(
                    EC.presence_of_element_located((By.ID, "output"))
                )
                if output.is_displayed():
                    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º—ã: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
                    self.test_results.append("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã Text Box: PASS")
                    self.take_screenshot("06_text_box_result")
                else:
                    print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º—ã: –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
                    self.test_results.append("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã Text Box: FAIL")

            except TimeoutException:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results.append("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã Text Box: FAIL")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Text Box: {e}")
            self.test_results.append("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Text Box: FAIL")

    def test_buttons_page(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        print("\nüîò === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BUTTONS ===")

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Buttons
            buttons_menu = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//span[text()='Buttons']"))
            )
            buttons_menu.click()
            time.sleep(2)
            self.take_screenshot("07_buttons_page")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
            button_elements = [
                (By.ID, "doubleClickBtn", "–ö–Ω–æ–ø–∫–∞ 'Double Click Me'"),
                (By.ID, "rightClickBtn", "–ö–Ω–æ–ø–∫–∞ 'Right Click Me'"),
                (By.XPATH, "//button[text()='Click Me']", "–ö–Ω–æ–ø–∫–∞ 'Click Me'")
            ]

            for locator, name in button_elements:
                self.check_element_exists(locator, name)
                self.check_element_clickable(locator, name)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
            try:
                click_btn = self.driver.find_element(By.XPATH, "//button[text()='Click Me']")
                click_btn.click()
                time.sleep(1)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                try:
                    message = self.driver.find_element(By.ID, "dynamicClickMessage")
                    if message.is_displayed():
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: '{message.text}'")
                        self.test_results.append("‚úÖ –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: PASS")
                    else:
                        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
                        self.test_results.append("‚ùå –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: FAIL")
                except NoSuchElementException:
                    print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    self.test_results.append("‚ùå –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: FAIL")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {e}")
                self.test_results.append("‚ùå –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: FAIL")

            self.take_screenshot("08_buttons_tested")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
            self.test_results.append("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: FAIL")

    def test_navigation_elements(self):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        print("\nüß≠ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–í–ò–ì–ê–¶–ò–ò ===")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.driver.get(self.base_url)
        time.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        nav_elements = [
            (By.CSS_SELECTOR, "header", "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
            (By.CSS_SELECTOR, "footer", "–ü–æ–¥–≤–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
            (By.XPATH, "//div[contains(@class, 'banner')]", "–ë–∞–Ω–Ω–µ—Ä"),
        ]

        for locator, name in nav_elements:
            element = self.check_element_exists(locator, name, timeout=3)
            if element and element.is_displayed():
                print(f"‚úÖ {name}: –≤–∏–¥–∏–º—ã–π")
            elif element:
                print(f"‚ö†Ô∏è {name}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –≤–∏–¥–∏–º—ã–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            links = self.driver.find_elements(By.TAG_NAME, "a")
            visible_links = [link for link in links if link.is_displayed() and link.get_attribute("href")]

            if visible_links:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(visible_links)} –≤–∏–¥–∏–º—ã—Ö —Å—Å—ã–ª–æ–∫")
                self.test_results.append(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ ({len(visible_links)} —à—Ç.): PASS")
            else:
                print("‚ö†Ô∏è –í–∏–¥–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.test_results.append("‚ö†Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: WARNING")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø UI –≠–õ–ï–ú–ï–ù–¢–û–í –ù–ê DEMOQA.COM")
        print("=" * 60)

        if not self.setup_driver():
            return False

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            self.test_homepage_elements()
            self.test_elements_page()
            self.test_text_box_functionality()
            self.test_buttons_page()
            self.test_navigation_elements()

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            self.take_screenshot("09_final_state")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.take_screenshot("error_critical")

        finally:
            self.cleanup()
            self.print_test_summary()

    def print_test_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)

        passed_tests = [result for result in self.test_results if "PASS" in result]
        failed_tests = [result for result in self.test_results if "FAIL" in result]
        warning_tests = [result for result in self.test_results if "WARNING" in result]

        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {len(passed_tests)}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(failed_tests)}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(warning_tests)}")
        print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(self.test_results)}")

        if len(passed_tests) > 0:
            success_rate = (len(passed_tests) / len(self.test_results)) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")

        print("\n–î–ï–¢–ê–õ–ò:")
        for result in self.test_results:
            print(f"  {result}")

        print("\n" + "=" * 60)
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {SCREENSHOTS_DIR}")
        print("=" * 60)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.driver:
            self.driver.quit()
            print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ui_test = DemoQAUITest()
    ui_test.run_all_tests()
