"""
üç™ COOKIE CLICKER AI AUTOMATION TEST
–ê–≤—Ç–æ—Ç–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∏–≥—Ä—ã Cookie Clicker —Å –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–ª–∏–∫–∞–Ω–∏–µ –ø–æ –ø–µ—á–µ–Ω—å–∫–µ
- –ò–ò-–∞–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –ø–æ–∫—É–ø–æ–∫
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ê–≤—Ç–æ—Å–µ–π–≤—ã –∏ –±—ç–∫–∞–ø—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

import os
import time
import json
import math
import random
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import threading
import queue

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫–∏
os.environ['WDM_SSL_VERIFY'] = '0'


class CookieClickerAI:
    """–ò–ò-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è Cookie Clicker —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""

    def __init__(self):
        self.driver = None
        self.wait = None
        self.game_url = "https://orteil.dashnet.org/cookieclicker/"

        # –ü–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.screenshots_dir = "cookie_clicker_screenshots"
        self.data_dir = "cookie_clicker_data"
        self.reports_dir = "cookie_clicker_reports"

        for directory in [self.screenshots_dir, self.data_dir, self.reports_dir]:
            os.makedirs(directory, exist_ok=True)

        # –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.game_stats = {
            'start_time': None,
            'total_cookies': 0,
            'cookies_per_second': 0,
            'total_clicks': 0,
            'buildings_bought': {},
            'upgrades_bought': [],
            'achievements_unlocked': [],
            'golden_cookies_clicked': 0,
            'strategy_changes': 0,
            'efficiency_score': 0
        }

        # –ò–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.ai_config = {
            'click_frequency': 15,  # –∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
            'strategy_review_interval': 30,  # —Å–µ–∫—É–Ω–¥
            'efficiency_threshold': 0.7,  # –ø–æ—Ä–æ–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            'max_price_ratio': 0.15,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–∏—Ö cookies –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            'golden_cookie_priority': True,
            'achievement_hunting': True
        }

        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∫—É–ø–æ–∫
        self.strategies = {
            'balanced': {'buildings': 0.6, 'upgrades': 0.4},
            'buildings_focus': {'buildings': 0.8, 'upgrades': 0.2},
            'upgrades_focus': {'buildings': 0.3, 'upgrades': 0.7},
            'adaptive': {'buildings': 0.5, 'upgrades': 0.5}  # –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
        }

        self.current_strategy = 'adaptive'
        self.click_thread = None
        self.analysis_thread = None
        self.running = False

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        options = Options()
        options.add_argument("--start-maximized")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)

        # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–≤—É–∫
        prefs = {
            "profile.default_content_setting_values.notifications": 2,
            "profile.default_content_setting_values.media_stream": 2,
            "profile.managed_default_content_settings.images": 1
        }
        options.add_experimental_option("prefs", prefs)

        try:
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=options)
            self.wait = WebDriverWait(self.driver, 20)

            # –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è Cookie Clicker –∑–∞–ø—É—â–µ–Ω")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    def take_screenshot(self, name):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        if self.driver:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"{name}_{timestamp}.png"
            filepath = os.path.join(self.screenshots_dir, filename)
            self.driver.save_screenshot(filepath)
            print(f"üì∏ –ò–≥—Ä–æ–≤–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {filename}")
            return filepath
        return None

    def load_game(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã Cookie Clicker"""
        print("üç™ –ó–∞–≥—Ä—É–∂–∞–µ–º Cookie Clicker...")

        try:
            self.driver.get(self.game_url)

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã...")

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—á–µ–Ω—å—è
            big_cookie = self.wait.until(
                EC.element_to_be_clickable((By.ID, "bigCookie"))
            )

            time.sleep(5)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                language_selector = self.driver.find_element(By.ID, "langSelect-EN")
                if language_selector:
                    language_selector.click()
                    time.sleep(2)
            except:
                pass

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                close_buttons = self.driver.find_elements(By.CSS_SELECTOR, ".close, .closeButton, [onclick*='close']")
                for btn in close_buttons:
                    if btn.is_displayed():
                        btn.click()
                        time.sleep(1)
            except:
                pass

            self.take_screenshot("01_game_loaded")
            print("‚úÖ Cookie Clicker –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.game_stats['start_time'] = datetime.now()

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã: {e}")
            return False

    def get_game_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫"""
        try:
            stats = {}

            # –¢–µ–∫—É—â–∏–µ cookies
            try:
                cookies_text = self.driver.find_element(By.ID, "cookies").text
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "123 cookies")
                import re
                cookies_match = re.search(r'([\d,]+)', cookies_text.replace(',', ''))
                if cookies_match:
                    stats['current_cookies'] = int(cookies_match.group(1))
                else:
                    stats['current_cookies'] = 0
            except:
                stats['current_cookies'] = 0

            # Cookies per second
            try:
                cps_element = self.driver.find_element(By.ID, "cookiesPerSecond")
                cps_text = cps_element.text
                cps_match = re.search(r'([\d,\.]+)', cps_text.replace(',', ''))
                if cps_match:
                    stats['cookies_per_second'] = float(cps_match.group(1))
                else:
                    stats['cookies_per_second'] = 0
            except:
                stats['cookies_per_second'] = 0

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.game_stats['total_cookies'] = stats['current_cookies']
            self.game_stats['cookies_per_second'] = stats['cookies_per_second']

            return stats

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'current_cookies': 0, 'cookies_per_second': 0}

    def click_cookie(self, clicks=1):
        """–ö–ª–∏–∫ –ø–æ –≥–ª–∞–≤–Ω–æ–º—É –ø–µ—á–µ–Ω—å—é"""
        try:
            big_cookie = self.driver.find_element(By.ID, "bigCookie")

            for _ in range(clicks):
                big_cookie.click()
                self.game_stats['total_clicks'] += 1

                # –ù–µ–±–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
                time.sleep(random.uniform(0.01, 0.03))

            return True

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø–µ—á–µ–Ω—å—é: {e}")
            return False

    def auto_clicker_thread(self):
        """–ü–æ—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∏–∫–∞–Ω–∏—è"""
        print("üñ±Ô∏è –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")

        while self.running:
            try:
                # –ö–ª–∏–∫–∞–µ–º —Å –∑–∞–¥–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
                clicks_per_batch = max(1, self.ai_config['click_frequency'] // 10)
                self.click_cookie(clicks_per_batch)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–ª–æ—Ç—ã–µ –ø–µ—á–µ–Ω—å—è
                if self.ai_config['golden_cookie_priority']:
                    self.click_golden_cookies()

                time.sleep(0.1)  # 10 –±–∞—Ç—á–µ–π –≤ —Å–µ–∫—É–Ω–¥—É

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–µ: {e}")
                time.sleep(1)

    def click_golden_cookies(self):
        """–ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∑–æ–ª–æ—Ç—ã–º –ø–µ—á–µ–Ω—å—è–º"""
        try:
            golden_cookies = self.driver.find_elements(By.CSS_SELECTOR, ".shimmer")

            for cookie in golden_cookies:
                if cookie.is_displayed():
                    cookie.click()
                    self.game_stats['golden_cookies_clicked'] += 1
                    print("‚ú® –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∑–æ–ª–æ—Ç–æ–º—É –ø–µ—á–µ–Ω—å—é!")
                    time.sleep(0.1)

        except Exception as e:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–∏–π –Ω–µ—Ç

    def analyze_buildings(self):
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        buildings = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π
            building_elements = self.driver.find_elements(By.CSS_SELECTOR, "#products .product")

            for i, building in enumerate(building_elements):
                try:
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
                    name_element = building.find_element(By.CSS_SELECTOR, ".title")
                    name = name_element.text.strip()

                    # –¶–µ–Ω–∞ –∑–¥–∞–Ω–∏—è
                    price_element = building.find_element(By.CSS_SELECTOR, ".price")
                    price_text = price_element.text.strip()

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                    import re
                    price_match = re.search(r'([\d,\.]+)', price_text.replace(',', ''))
                    if price_match:
                        price = float(price_match.group(1))
                    else:
                        continue

                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π
                    owned_element = building.find_element(By.CSS_SELECTOR, ".owned")
                    owned = int(owned_element.text) if owned_element.text.isdigit() else 0

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                    is_enabled = "enabled" in building.get_attribute("class")

                    buildings.append({
                        'index': i,
                        'name': name,
                        'price': price,
                        'owned': owned,
                        'enabled': is_enabled,
                        'element': building
                    })

                except Exception as e:
                    continue

            return buildings

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–¥–∞–Ω–∏–π: {e}")
            return []

    def analyze_upgrades(self):
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
        upgrades = []

        try:
            upgrade_elements = self.driver.find_elements(By.CSS_SELECTOR, "#upgrades .crate:not(.ghosted)")

            for i, upgrade in enumerate(upgrade_elements):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ title –∏–ª–∏ onclick
                    title = upgrade.get_attribute("title") or upgrade.get_attribute("data-title")
                    onclick = upgrade.get_attribute("onclick")

                    if onclick and "Game.UpgradesById" in onclick:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É–ª—É—á—à–µ–Ω–∏—è
                        import re
                        id_match = re.search(r'UpgradesById\[(\d+)\]', onclick)
                        if id_match:
                            upgrade_id = int(id_match.group(1))

                            upgrades.append({
                                'index': i,
                                'id': upgrade_id,
                                'title': title,
                                'element': upgrade,
                                'enabled': upgrade.is_displayed()
                            })

                except Exception as e:
                    continue

            return upgrades

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–ª—É—á—à–µ–Ω–∏–π: {e}")
            return []

    def calculate_building_efficiency(self, building, current_cookies):
        """–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–¥–∞–Ω–∏—è"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞ —Å–µ–∫—É–Ω–¥—É / —Ü–µ–Ω–∞
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑

            # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –∑–¥–∞–Ω–∏–π Cookie Clicker
            base_production = {
                'Cursor': 0.1,
                'Grandma': 1,
                'Farm': 8,
                'Mine': 47,
                'Factory': 260,
                'Bank': 1400,
                'Temple': 7800,
                'Wizard tower': 44000,
                'Shipment': 260000,
                'Alchemy lab': 1600000,
                'Portal': 10000000,
                'Time machine': 65000000,
                'Antimatter condenser': 430000000
            }

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            base_cps = base_production.get(building['name'], 1)

            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è –∑–¥–∞–Ω–∏–π (—É–º–µ–Ω—å—à–∞—é—â–∞—è—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
            owned_multiplier = 1 / (1 + building['owned'] * 0.1)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            efficiency = (base_cps * owned_multiplier) / building['price']

            # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (–º–æ–∂–µ–º –ª–∏ –∫—É–ø–∏—Ç—å)
            affordability = min(1.0, current_cookies / building['price'])

            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            score = efficiency * affordability

            return score

        except Exception as e:
            return 0

    def ai_purchase_decision(self):
        """–ò–ò –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ"""
        try:
            stats = self.get_game_stats()
            current_cookies = stats['current_cookies']

            if current_cookies < 10:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ cookies
                return None

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–¥–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è
            buildings = self.analyze_buildings()
            upgrades = self.analyze_upgrades()

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–¥–∞–Ω–∏—è
            affordable_buildings = [
                b for b in buildings
                if b['enabled'] and b['price'] <= current_cookies * self.ai_config['max_price_ratio']
            ]

            best_building = None
            best_efficiency = 0

            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
            for building in affordable_buildings:
                efficiency = self.calculate_building_efficiency(building, current_cookies)
                if efficiency > best_efficiency:
                    best_efficiency = efficiency
                    best_building = building

            # –†–µ—à–∞–µ–º –º–µ–∂–¥—É –∑–¥–∞–Ω–∏–µ–º –∏ —É–ª—É—á—à–µ–Ω–∏–µ–º
            strategy = self.strategies[self.current_strategy]

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–¥–∞–Ω–∏—è–º
            if best_building and random.random() < strategy['buildings']:
                return {'type': 'building', 'item': best_building}

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è–º
            elif upgrades and random.random() < strategy['upgrades']:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
                return {'type': 'upgrade', 'item': random.choice(upgrades)}

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫—É–ø–∞–µ–º –∑–¥–∞–Ω–∏–µ
            elif best_building:
                return {'type': 'building', 'item': best_building}

            return None

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò —Ä–µ—à–µ–Ω–∏—è: {e}")
            return None

    def make_purchase(self, decision):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏"""
        try:
            if decision['type'] == 'building':
                building = decision['item']
                building['element'].click()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                building_name = building['name']
                if building_name not in self.game_stats['buildings_bought']:
                    self.game_stats['buildings_bought'][building_name] = 0
                self.game_stats['buildings_bought'][building_name] += 1

                print(
                    f"üèóÔ∏è –ö—É–ø–∏–ª–∏ –∑–¥–∞–Ω–∏–µ: {building_name} (–≤—Å–µ–≥–æ: {self.game_stats['buildings_bought'][building_name]})")

            elif decision['type'] == 'upgrade':
                upgrade = decision['item']
                upgrade['element'].click()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.game_stats['upgrades_bought'].append(upgrade.get('title', f"Upgrade {upgrade['id']}"))

                print(f"‚¨ÜÔ∏è –ö—É–ø–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ: {upgrade.get('title', f'ID {upgrade['id']}')}")

            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
            return True

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
            return False

    def ai_analysis_thread(self):
        """–ü–æ—Ç–æ–∫ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–∫—É–ø–æ–∫"""
        print("üß† –ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

        last_strategy_review = time.time()

        while self.running:
            try:
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
                decision = self.ai_purchase_decision()

                if decision:
                    success = self.make_purchase(decision)
                    if success:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –≤–∞–∂–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
                        self.save_game_progress()

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                if time.time() - last_strategy_review > self.ai_config['strategy_review_interval']:
                    self.review_strategy()
                    last_strategy_review = time.time()

                time.sleep(2)  # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ: {e}")
                time.sleep(5)

    def review_strategy(self):
        """–ü–µ—Ä–µ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            stats = self.get_game_stats()

            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if stats['cookies_per_second'] < 100:
                # –í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∑–¥–∞–Ω–∏—è—Ö
                new_strategy = 'buildings_focus'
            elif stats['cookies_per_second'] < 10000:
                # –í —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–∞–¥–∏–∏ –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º
                new_strategy = 'balanced'
            else:
                # –í –ø–æ–∑–¥–Ω–µ–π —Å—Ç–∞–¥–∏–∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è—Ö
                new_strategy = 'upgrades_focus'

            if new_strategy != self.current_strategy:
                self.current_strategy = new_strategy
                self.game_stats['strategy_changes'] += 1
                print(f"üéØ –°–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞: {new_strategy}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    def save_game_progress(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä—ã"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON
            stats_with_time = self.game_stats.copy()
            stats_with_time['current_time'] = datetime.now().isoformat()

            timestamp = time.strftime("%Y%m%d_%H%M%S")
            stats_file = os.path.join(self.data_dir, f"game_stats_{timestamp}.json")

            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(stats_with_time, f, indent=2, ensure_ascii=False, default=str)

            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å–µ–π–≤ (—á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞)
            try:
                save_data = self.driver.execute_script("return Game.WriteSave(1);")
                if save_data:
                    save_file = os.path.join(self.data_dir, f"cookie_save_{timestamp}.txt")
                    with open(save_file, 'w', encoding='utf-8') as f:
                        f.write(save_data)
                    print(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {timestamp}")
            except:
                pass

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def generate_performance_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if not self.game_stats['start_time']:
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
            play_time = datetime.now() - self.game_stats['start_time']
            play_minutes = play_time.total_seconds() / 60

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            cookies_per_minute = self.game_stats['total_cookies'] / max(play_minutes, 1)
            clicks_per_minute = self.game_stats['total_clicks'] / max(play_minutes, 1)

            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = {
                'test_summary': {
                    'start_time': self.game_stats['start_time'].isoformat(),
                    'end_time': datetime.now().isoformat(),
                    'total_play_time_minutes': round(play_minutes, 2),
                    'total_cookies_earned': self.game_stats['total_cookies'],
                    'final_cookies_per_second': self.game_stats['cookies_per_second'],
                    'total_clicks_made': self.game_stats['total_clicks'],
                    'golden_cookies_clicked': self.game_stats['golden_cookies_clicked'],
                    'strategy_changes': self.game_stats['strategy_changes']
                },
                'performance_metrics': {
                    'cookies_per_minute': round(cookies_per_minute, 2),
                    'clicks_per_minute': round(clicks_per_minute, 2),
                    'efficiency_score': round(cookies_per_minute / max(clicks_per_minute, 1), 4),
                    'automation_effectiveness': 'HIGH' if cookies_per_minute > 1000 else 'MEDIUM' if cookies_per_minute > 100 else 'LOW'
                },
                'buildings_purchased': self.game_stats['buildings_bought'],
                'upgrades_count': len(self.game_stats['upgrades_bought']),
                'achievements_unlocked': len(self.game_stats['achievements_unlocked']),
                'ai_configuration': self.ai_config,
                'final_strategy': self.current_strategy
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            report_file = os.path.join(self.reports_dir, f"performance_report_{timestamp}.json")

            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False, default=str)

            # –ü–µ—á–∞—Ç–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
            self.print_performance_summary(report)

            return report_file

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return None

    def print_performance_summary(self, report):
        """–ü–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n" + "=" * 60)
        print("üç™ –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò COOKIE CLICKER AI")
        print("=" * 60)

        summary = report['test_summary']
        metrics = report['performance_metrics']

        print(f"‚è±Ô∏è –í—Ä–µ–º—è –∏–≥—Ä—ã: {summary['total_play_time_minutes']} –º–∏–Ω—É—Ç")
        print(f"üç™ –í—Å–µ–≥–æ cookies: {summary['total_cookies_earned']:,}")
        print(f"‚ö° Cookies/—Å–µ–∫: {summary['final_cookies_per_second']:,}")
        print(f"üñ±Ô∏è –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {summary['total_clicks_made']:,}")
        print(f"‚ú® –ó–æ–ª–æ—Ç—ã—Ö cookies: {summary['golden_cookies_clicked']}")

        print(f"\nüìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print(f"   Cookies –≤ –º–∏–Ω—É—Ç—É: {metrics['cookies_per_minute']:,}")
        print(f"   –ö–ª–∏–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {metrics['clicks_per_minute']:,}")
        print(f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {metrics['efficiency_score']}")
        print(f"   –û—Ü–µ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {metrics['automation_effectiveness']}")

        print(f"\nüèóÔ∏è –ó–î–ê–ù–ò–Ø –ö–£–ü–õ–ï–ù–û:")
        for building, count in summary['buildings_purchased'].items():
            print(f"   {building}: {count}")

        print(f"\n‚¨ÜÔ∏è –£–ª—É—á—à–µ–Ω–∏–π –∫—É–ø–ª–µ–Ω–æ: {summary['upgrades_count']}")
        print(f"üéØ –°–º–µ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {summary['strategy_changes']}")
        print(f"üß† –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {summary['final_strategy']}")

        print("=" * 60)

    def run_ai_cookie_test(self, duration_minutes=10):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ò–ò —Ç–µ—Å—Ç–∞ Cookie Clicker"""
        print("üç™ –ó–ê–ü–£–°–ö AI COOKIE CLICKER –¢–ï–°–¢–ê")
        print("=" * 50)
        print(f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω—É—Ç")
        print(f"üß† –ò–ò –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.ai_config}")
        print("=" * 50)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        if not self.setup_driver():
            return False

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É
            if not self.load_game():
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
            self.running = True

            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            self.click_thread = threading.Thread(target=self.auto_clicker_thread, daemon=True)
            self.analysis_thread = threading.Thread(target=self.ai_analysis_thread, daemon=True)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
            self.click_thread.start()
            self.analysis_thread.start()

            print("üöÄ –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            start_time = time.time()
            last_screenshot = time.time()
            last_stats_print = time.time()

            while time.time() - start_time < duration_minutes * 60:
                try:
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
                    if time.time() - last_screenshot > 60:  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                        self.take_screenshot("gameplay")
                        last_screenshot = time.time()

                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    if time.time() - last_stats_print > 30:  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                        stats = self.get_game_stats()
                        elapsed = (time.time() - start_time) / 60
                        print(
                            f"üìä [{elapsed:.1f}–º–∏–Ω] Cookies: {stats['current_cookies']:,}, CPS: {stats['cookies_per_second']:,}")
                        last_stats_print = time.time()

                    time.sleep(5)  # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    time.sleep(5)

            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            self.running = False

            print("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
            self.take_screenshot("final_result")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report_file = self.generate_performance_report()

            if report_file:
                print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

            return True

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            return False

        finally:
            self.running = False
            if self.driver:
                self.driver.quit()
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")


def run_interactive_cookie_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    print("üç™ COOKIE CLICKER AI TESTER")
    print("=" * 40)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫
    ai_tester = CookieClickerAI()

    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞:")
    print("1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (5 –º–∏–Ω—É—Ç)")
    print("2. –°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç (15 –º–∏–Ω—É—Ç)")
    print("3. –î–ª–∏–Ω–Ω—ã–π —Ç–µ—Å—Ç (30 –º–∏–Ω—É—Ç)")
    print("4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞ (1-4): ").strip()

        if choice == "1":
            duration = 5
            ai_tester.ai_config['click_frequency'] = 20
        elif choice == "2":
            duration = 15
            ai_tester.ai_config['click_frequency'] = 15
        elif choice == "3":
            duration = 30
            ai_tester.ai_config['click_frequency'] = 10
        elif choice == "4":
            duration = int(input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö: "))
            frequency = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∫–ª–∏–∫–æ–≤ (1-30): "))
            ai_tester.ai_config['click_frequency'] = max(1, min(30, frequency))
        else:
            duration = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        print(f"\nüéÆ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–∞ {duration} –º–∏–Ω—É—Ç...")
        print("üí° –°–æ–≤–µ—Ç: –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        success = ai_tester.run_ai_cookie_test(duration)

        if success:
            print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: {ai_tester.screenshots_dir}")
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {ai_tester.data_dir}")
            print(f"üìÑ –û—Ç—á–µ—Ç—ã: {ai_tester.reports_dir}")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    run_interactive_cookie_test()
