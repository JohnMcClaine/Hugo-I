import os
import random
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

# –†–ï–®–ï–ù–ò–ï 1: –û—Ç–∫–ª—é—á–∏—Ç—å SSL-–ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è WebDriverManager
os.environ['WDM_SSL_VERIFY'] = '0'

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
SCREENSHOTS_DIR = "screenshots"
os.makedirs(SCREENSHOTS_DIR, exist_ok=True)


def human_delay(min_s=0.8, max_s=2.5):
    """–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞"""
    time.sleep(random.uniform(min_s, max_s))


def human_typing(element, text):
    """–ü–µ—á–∞—Ç—å –ø–æ –±—É–∫–≤–∞–º —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
    for letter in text:
        element.send_keys(letter)
        time.sleep(random.uniform(0.07, 0.22))
        if letter == " ":
            time.sleep(random.uniform(0.15, 0.35))


def take_screenshot(driver, step):
    filename = os.path.join(SCREENSHOTS_DIR, f"{step}.png")
    driver.save_screenshot(filename)
    print(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")


def test_google_kitten_search():
    # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –¥–ª—è SSL
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    options.add_argument("--disable-blink-features=AutomationControlled")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
    options.add_argument("--allow-running-insecure-content")
    options.add_argument("--ignore-certificate-errors")
    options.add_argument("--ignore-ssl-errors")
    options.add_argument("--disable-web-security")
    options.add_argument("--allow-running-insecure-content")

    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.4896.127 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15",
    ]
    options.add_argument(f"user-agent={random.choice(user_agents)}")

    try:
        # –†–ï–®–ï–ù–ò–ï 2: –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º SSL-–ø—Ä–æ–≤–µ—Ä–∫–∏
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)

        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebDriver: {e}")
        print("\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –°–∫–∞—á–∞–π—Ç–µ ChromeDriver –≤—Ä—É—á–Ω—É—é: https://chromedriver.chromium.org/")
        print("2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –±–µ–∑ WebDriverManager (—Å–º. –Ω–∏–∂–µ)")
        return

    try:
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ç–µ—Å—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
        driver.get("https://www.google.com/")
        human_delay(1, 2)
        take_screenshot(driver, "01_google_home")

        # –ü—Ä–∏–Ω—è—Ç—å –∫—É–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        try:
            consent_selectors = [
                '//button[contains(text(),"–ü—Ä–∏–Ω—è—Ç—å")]',
                '//button[contains(text(),"Accept")]',
                '#L2AGLb',
                '[aria-label*="Accept"]'
            ]

            for selector in consent_selectors:
                try:
                    if selector.startswith('//'):
                        consent = driver.find_element(By.XPATH, selector)
                    else:
                        consent = driver.find_element(By.CSS_SELECTOR, selector)
                    consent.click()
                    human_delay()
                    take_screenshot(driver, "02_consent_accepted")
                    break
                except:
                    continue
        except:
            pass

        # –ù–∞–π—Ç–∏ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        search_selectors = [
            "input[name='q']",
            "textarea[name='q']",
            "[title*='–ü–æ–∏—Å–∫']",
            "[title*='Search']"
        ]

        search_box = None
        for selector in search_selectors:
            try:
                search_box = driver.find_element(By.CSS_SELECTOR, selector)
                break
            except:
                continue

        if not search_box:
            print("‚ùå –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        search_box.click()
        human_delay()
        take_screenshot(driver, "03_search_box_clicked")

        # –í–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å "–∫–æ—Ç—è—Ç–∞"
        query = random.choice([
            "–º–∏–ª—ã–µ –∫–æ—Ç—è—Ç–∞", "cute kittens", "–∫–æ—Ç—è—Ç–∞ —Ñ–æ—Ç–æ", "kitten pictures"
        ])
        print(f"üîç –ò—â–µ–º: {query}")
        human_typing(search_box, query)
        human_delay(1, 1.7)
        take_screenshot(driver, "04_query_typed")

        # –ù–∞–∂–∞—Ç—å Enter –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        if random.random() < 0.5:
            search_box.send_keys(Keys.RETURN)
        else:
            human_delay(0.3, 0.7)
            search_box.send_keys(Keys.ARROW_DOWN)
            time.sleep(0.4)
            search_box.send_keys(Keys.RETURN)

        human_delay(2, 3)
        take_screenshot(driver, "05_search_results")

        # –û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É "–ö–∞—Ä—Ç–∏–Ω–∫–∏"
        images_selectors = [
            '//a[contains(text(),"–ö–∞—Ä—Ç–∏–Ω–∫–∏")]',
            '//a[contains(text(),"Images")]',
            'a[href*="tbm=isch"]'
        ]

        images_tab = None
        for selector in images_selectors:
            try:
                if selector.startswith('//'):
                    images_tab = driver.find_element(By.XPATH, selector)
                else:
                    images_tab = driver.find_element(By.CSS_SELECTOR, selector)
                break
            except:
                continue

        if images_tab:
            images_tab.click()
            human_delay(2, 3)
            take_screenshot(driver, "06_images_tab")
            print("üñºÔ∏è –ü–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–ö–∞—Ä—Ç–∏–Ω–∫–∏'")
        else:
            print("‚ö†Ô∏è –í–∫–ª–∞–¥–∫–∞ '–ö–∞—Ä—Ç–∏–Ω–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
        for i in range(3):
            driver.execute_script(f"window.scrollBy(0, {random.randint(250, 550)});")
            human_delay(0.7, 1.6)
            take_screenshot(driver, f"07_scrolled_{i + 1}")
            print(f"üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {i + 1}/3")

        # –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            images = driver.find_elements(By.CSS_SELECTOR, "img[src*='http']")
            visible_images = [img for img in images if img.is_displayed()]

            if visible_images:
                img = random.choice(visible_images[:min(10, len(visible_images))])
                driver.execute_script("arguments[0].scrollIntoView(true);", img)
                human_delay(0.4, 0.9)
                img.click()
                human_delay(1, 2)
                take_screenshot(driver, "08_kitten_image_opened")
                print("üê± –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–µ–Ω–∫–∞!")
            else:
                print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        take_screenshot(driver, "error_screenshot")

    finally:
        driver.quit()


# –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ë–µ–∑ WebDriverManager
def test_google_kitten_search_manual():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ WebDriverManager"""

    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ chromedriver.exe –≤—Ä—É—á–Ω—É—é
    CHROMEDRIVER_PATH = r"C:\path\to\chromedriver.exe"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å

    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    options.add_argument("--disable-blink-features=AutomationControlled")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π chromedriver
        service = Service(CHROMEDRIVER_PATH)
        driver = webdriver.Chrome(service=service, options=options)
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –ª–æ–∫–∞–ª—å–Ω—ã–º ChromeDriver!")

        # –î–∞–ª–µ–µ —Ç–æ—Ç –∂–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞...
        driver.get("https://www.google.com/")
        human_delay(2, 3)
        print("üåê Google –∑–∞–≥—Ä—É–∂–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üí° –°–∫–∞—á–∞–π—Ç–µ ChromeDriver —Å https://chromedriver.chromium.org/")

    finally:
        if 'driver' in locals():
            driver.quit()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞ –∫–æ—Ç—è—Ç...")
    test_google_kitten_search()

    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ç–æ—Ä–æ–π:
    # test_google_kitten_search_manual()
