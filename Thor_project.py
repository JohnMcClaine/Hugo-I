"""
üåç FORM FILLING TEST WITH PROXY/TOR GEOLOCATION SIMULATION
–ê–≤—Ç–æ—Ç–µ—Å—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
- –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
- –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–º–µ–Ω—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tor –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
"""

import os
import time
import random
import json
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import pyperclip  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫–∏
os.environ['WDM_SSL_VERIFY'] = '0'


class GeoProxyFormTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º —Å –ø—Ä–æ–∫—Å–∏ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π"""

    def __init__(self):
        self.driver = None
        self.wait = None
        self.current_proxy = None
        self.current_country = None
        self.screenshots_dir = "geo_form_screenshots"
        self.test_results = []

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        os.makedirs(self.screenshots_dir, exist_ok=True)

        # –°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–µ)
        self.proxy_pool = [
            {
                "ip": "47.74.152.29",
                "port": "8888",
                "country": "US",
                "name": "United States"
            },
            {
                "ip": "85.208.96.205",
                "port": "8080",
                "country": "UK",
                "name": "United Kingdom"
            },
            {
                "ip": "103.149.162.195",
                "port": "80",
                "country": "IN",
                "name": "India"
            },
            {
                "ip": "200.105.215.18",
                "port": "33630",
                "country": "BR",
                "name": "Brazil"
            },
        ]

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        self.form_data_by_country = {
            "US": {
                "first_name": "John",
                "last_name": "Smith",
                "email": "john.smith.us@example.com",
                "phone": "+1 (555) 123-4567",
                "address": "123 Main Street, New York, NY 10001",
                "company": "American Corp LLC",
                "zip_code": "10001",
                "city": "New York"
            },
            "UK": {
                "first_name": "James",
                "last_name": "Wilson",
                "email": "james.wilson.uk@example.com",
                "phone": "+44 20 7946 0958",
                "address": "45 Baker Street, London, W1U 6TW",
                "company": "British Ltd",
                "zip_code": "W1U 6TW",
                "city": "London"
            },
            "IN": {
                "first_name": "Raj",
                "last_name": "Patel",
                "email": "raj.patel.in@example.com",
                "phone": "+91 98765 43210",
                "address": "MG Road, Bangalore, Karnataka 560001",
                "company": "Indian Tech Solutions",
                "zip_code": "560001",
                "city": "Bangalore"
            },
            "BR": {
                "first_name": "Carlos",
                "last_name": "Silva",
                "email": "carlos.silva.br@example.com",
                "phone": "+55 11 99999-8888",
                "address": "Av. Paulista, 1000, S√£o Paulo, SP 01310-100",
                "company": "Brasil Empresa Ltda",
                "zip_code": "01310-100",
                "city": "S√£o Paulo"
            }
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Tor (–¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏)
        self.tor_config = {
            "tor_binary": "C:/Program Files/Tor Browser/Browser/firefox.exe",  # –ü—É—Ç—å –∫ Tor –±—Ä–∞—É–∑–µ—Ä—É
            "tor_profile": "C:/Program Files/Tor Browser/Browser/TorBrowser/Data/Browser/profile.default",
            "socks_port": 9150
        }

    def setup_driver_with_proxy(self, proxy_info=None, use_tor=False):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ Tor"""
        options = Options()

        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        options.add_argument("--start-maximized")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)

        # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        options.add_argument(f"--user-agent={random.choice(user_agents)}")

        if use_tor:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Tor
            print("üßÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tor...")
            options.add_argument("--proxy-server=socks5://127.0.0.1:9150")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Tor
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-gpu")
            options.add_argument("--no-sandbox")

        elif proxy_info:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
            proxy_url = f"http://{proxy_info['ip']}:{proxy_info['port']}"
            options.add_argument(f"--proxy-server={proxy_url}")
            print(f"üåç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy_info['name']} ({proxy_info['ip']}:{proxy_info['port']})")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–µ–π–∫–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            if proxy_info['country'] in ['US']:
                prefs = {
                    "profile.default_content_setting_values.geolocation": 1,
                    "profile.managed_default_content_settings.geolocation": 1
                }
                options.add_experimental_option("prefs", prefs)

        # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        prefs = {
            "profile.default_content_setting_values.notifications": 2,
            "profile.default_content_setting_values.media_stream": 2,
        }
        options.add_experimental_option("prefs", prefs)

        try:
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=options)
            self.wait = WebDriverWait(self.driver, 15)

            # –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.current_proxy = proxy_info
            self.current_country = proxy_info['country'] if proxy_info else 'TOR'

            print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω {'—Å Tor' if use_tor else '—Å –ø—Ä–æ–∫—Å–∏' if proxy_info else '–±–µ–∑ –ø—Ä–æ–∫—Å–∏'}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    def verify_ip_and_location(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤
            ip_services = [
                "https://httpbin.org/ip",
                "https://api.ipify.org?format=json",
                "https://ipinfo.io/json"
            ]

            for service in ip_services:
                try:
                    self.driver.get(service)
                    time.sleep(3)

                    # –ü–æ–ª—É—á–∞–µ–º JSON –æ—Ç–≤–µ—Ç
                    body = self.driver.find_element(By.TAG_NAME, "body").text

                    if "httpbin.org" in service:
                        import json
                        data = json.loads(body)
                        ip = data.get("origin", "Unknown")
                        print(f"üìç IP (httpbin): {ip}")

                    elif "ipify" in service:
                        data = json.loads(body)
                        ip = data.get("ip", "Unknown")
                        print(f"üìç IP (ipify): {ip}")

                    elif "ipinfo.io" in service:
                        data = json.loads(body)
                        ip = data.get("ip", "Unknown")
                        country = data.get("country", "Unknown")
                        city = data.get("city", "Unknown")
                        region = data.get("region", "Unknown")

                        print(f"üìç IP (ipinfo): {ip}")
                        print(f"üåç –°—Ç—Ä–∞–Ω–∞: {country}")
                        print(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}, {region}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω–µ
                        if self.current_proxy and country != self.current_proxy.get('country'):
                            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ–∂–∏–¥–∞–ª–∏ {self.current_proxy['country']}, –ø–æ–ª—É—á–∏–ª–∏ {country}")
                        else:
                            print("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–∫—Å–∏")

                        break

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º {service}: {e}")
                    continue

            self.take_screenshot("ip_verification")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP: {e}")
            return False

    def take_screenshot(self, name):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        if self.driver:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            country = self.current_country or "unknown"
            filename = f"{name}_{country}_{timestamp}.png"
            filepath = os.path.join(self.screenshots_dir, filename)
            self.driver.save_screenshot(filepath)
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {filename}")
            return filepath
        return None

    def human_type(self, element, text, typing_speed='normal'):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""
        speeds = {
            'slow': (0.1, 0.3),
            'normal': (0.05, 0.15),
            'fast': (0.02, 0.08),
            'very_fast': (0.01, 0.03)
        }

        min_delay, max_delay = speeds.get(typing_speed, speeds['normal'])

        element.clear()
        for char in text:
            element.send_keys(char)
            time.sleep(random.uniform(min_delay, max_delay))

    def copy_paste_data(self, element, text):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        print(f"üìã –ö–æ–ø–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º: {text[:30]}...")

        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        pyperclip.copy(text)

        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        element.clear()
        time.sleep(0.2)

        # –ò–º–∏—Ç–∏—Ä—É–µ–º Ctrl+V
        element.send_keys(Keys.CONTROL + 'v')
        time.sleep(0.5)

    def fill_form_with_mixed_input(self, form_data):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –≤–≤–æ–¥–∞"""
        print(f"\nüìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã: {self.current_country}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
        input_methods = {
            'first_name': 'type_slow',
            'last_name': 'type_normal',
            'email': 'copy_paste',
            'phone': 'type_fast',
            'address': 'copy_paste',
            'company': 'type_normal',
            'zip_code': 'type_fast',
            'city': 'type_normal'
        }

        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–π—Ç)
        field_selectors = {
            'first_name': "input[name='firstName'], input[id*='first'], input[placeholder*='First']",
            'last_name': "input[name='lastName'], input[id*='last'], input[placeholder*='Last']",
            'email': "input[type='email'], input[name='email'], input[id*='email']",
            'phone': "input[type='tel'], input[name='phone'], input[id*='phone']",
            'address': "textarea[name='address'], input[name='address'], input[id*='address']",
            'company': "input[name='company'], input[id*='company'], input[placeholder*='Company']",
            'zip_code': "input[name='zip'], input[name='postal'], input[id*='zip']",
            'city': "input[name='city'], input[id*='city'], input[placeholder*='City']"
        }

        filled_fields = 0

        for field_name, field_value in form_data.items():
            if field_name in field_selectors:
                try:
                    # –ò—â–µ–º –ø–æ–ª–µ
                    selectors = field_selectors[field_name].split(', ')
                    element = None

                    for selector in selectors:
                        try:
                            element = self.wait.until(
                                EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                            )
                            break
                        except:
                            continue

                    if not element:
                        print(f"‚ö†Ô∏è –ü–æ–ª–µ {field_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        continue

                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                    self.driver.execute_script("arguments[0].scrollIntoView(true);", element)
                    time.sleep(0.5)

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –≤–≤–æ–¥–∞
                    input_method = input_methods.get(field_name, 'type_normal')

                    if input_method == 'copy_paste':
                        self.copy_paste_data(element, field_value)
                    elif input_method.startswith('type_'):
                        speed = input_method.replace('type_', '')
                        self.human_type(element, field_value, speed)

                    filled_fields += 1
                    print(f"‚úÖ {field_name}: {field_value}")

                    # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏
                    time.sleep(random.uniform(0.5, 2.0))

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è {field_name}: {e}")
                    continue

        print(f"üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {filled_fields}/{len(form_data)}")
        return filled_fields > 0

    def test_form_with_proxy(self, proxy_info, target_url):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ–∫—Å–∏"""
        print(f"\nüåç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –ü–†–û–ö–°–ò {proxy_info['name']} ===")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ–∫—Å–∏
        if not self.setup_driver_with_proxy(proxy_info):
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∏ –ª–æ–∫–∞—Ü–∏—é
            self.verify_ip_and_location()

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: {target_url}")
            self.driver.get(target_url)
            time.sleep(3)

            self.take_screenshot("01_page_loaded")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω—ã
            form_data = self.form_data_by_country.get(
                proxy_info['country'],
                self.form_data_by_country['US']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é US
            )

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            success = self.fill_form_with_mixed_input(form_data)

            if success:
                self.take_screenshot("02_form_filled")

                # –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                submit_buttons = [
                    "button[type='submit']",
                    "input[type='submit']",
                    "button:contains('Submit')",
                    "button:contains('Send')",
                    ".submit-btn",
                    "#submit"
                ]

                for selector in submit_buttons:
                    try:
                        if 'contains' not in selector:
                            submit_btn = self.driver.find_element(By.CSS_SELECTOR, selector)
                        else:
                            # XPath –¥–ª—è contains
                            xpath = selector.replace('button:contains', '//button[contains(text()').replace("')", "')]")
                            submit_btn = self.driver.find_element(By.XPATH, xpath)

                        if submit_btn.is_displayed() and submit_btn.is_enabled():
                            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...")

                            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ
                            self.driver.execute_script("arguments[0].scrollIntoView(true);", submit_btn)
                            time.sleep(1)

                            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
                            submit_btn.click()
                            time.sleep(3)

                            self.take_screenshot("03_form_submitted")
                            print("‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

                            break
                    except Exception as e:
                        continue

                self.test_results.append({
                    'country': proxy_info['name'],
                    'proxy': f"{proxy_info['ip']}:{proxy_info['port']}",
                    'success': True,
                    'fields_filled': len(form_data)
                })

            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É")
                self.test_results.append({
                    'country': proxy_info['name'],
                    'proxy': f"{proxy_info['ip']}:{proxy_info['port']}",
                    'success': False,
                    'fields_filled': 0
                })

            return success

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.take_screenshot("error_critical")
            return False

        finally:
            if self.driver:
                self.driver.quit()
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    def test_form_with_tor(self, target_url):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ Tor"""
        print(f"\nüßÖ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ï–†–ï–ó TOR ===")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Tor
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tor...")

        try:
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex(('127.0.0.1', 9150))
            sock.close()

            if result != 0:
                print("‚ùå Tor –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 9150")
                print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Tor Browser –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tor: {e}")
            return False

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å Tor
        if not self.setup_driver_with_proxy(use_tor=True):
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ Tor
            print("üßÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ Tor...")
            self.verify_ip_and_location()

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: {target_url}")
            self.driver.get(target_url)
            time.sleep(5)  # Tor –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ

            self.take_screenshot("tor_01_page_loaded")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Tor
            countries = list(self.form_data_by_country.keys())
            random_country = random.choice(countries)
            form_data = self.form_data_by_country[random_country]

            print(f"üé≤ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {random_country}")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            success = self.fill_form_with_mixed_input(form_data)

            if success:
                self.take_screenshot("tor_02_form_filled")
                print("‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ Tor!")

                self.test_results.append({
                    'country': 'TOR Network',
                    'proxy': 'SOCKS5://127.0.0.1:9150',
                    'success': True,
                    'fields_filled': len(form_data)
                })

            return success

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Tor: {e}")
            return False

        finally:
            if self.driver:
                self.driver.quit()
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    def run_comprehensive_geo_test(self, target_url):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏"""
        print("üåç –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ì–ï–û-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"üéØ –¶–µ–ª–µ–≤–æ–π URL: {target_url}")
        print(f"üåê –ü—Ä–æ–∫—Å–∏ –≤ –ø—É–ª–µ: {len(self.proxy_pool)}")
        print("=" * 60)

        start_time = time.time()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–∫—Å–∏
        for i, proxy in enumerate(self.proxy_pool, 1):
            print(f"\nüîÑ –≠–¢–ê–ü {i}/{len(self.proxy_pool)}")
            print("-" * 40)

            success = self.test_form_with_proxy(proxy, target_url)

            if not success:
                print(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy['name']} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–∫—Å–∏
            if i < len(self.proxy_pool):
                print("‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ–∫—Å–∏...")
                time.sleep(random.uniform(3, 8))

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Tor (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        print(f"\nüîÑ –≠–¢–ê–ü {len(self.proxy_pool) + 1}: TOR")
        print("-" * 40)

        try:
            self.test_form_with_tor(target_url)
        except Exception as e:
            print(f"‚ö†Ô∏è Tor —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω: {e}")

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_test_report(time.time() - start_time)

    def print_test_report(self, total_time):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ì–ï–û-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)

        successful_tests = [r for r in self.test_results if r['success']]
        failed_tests = [r for r in self.test_results if not r['success']]

        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful_tests)}")
        print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(failed_tests)}")
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(self.test_results)}")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")

        if len(successful_tests) > 0:
            success_rate = (len(successful_tests) / len(self.test_results)) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")

        print(f"\nüìã –î–ï–¢–ê–õ–ò –ü–û –°–¢–†–ê–ù–ê–ú:")
        for result in self.test_results:
            status = "‚úÖ SUCCESS" if result['success'] else "‚ùå FAILED"
            print(f"  üåç {result['country']}: {status}")
            print(f"     üì° –ü—Ä–æ–∫—Å–∏: {result['proxy']}")
            print(f"     üìù –ü–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {result['fields_filled']}")

        print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.screenshots_dir}")
        print("=" * 60)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if len(successful_tests) == len(self.test_results):
            print("üéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        elif len(successful_tests) > len(failed_tests):
            print("üëç –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω—ã")
        else:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ú–Ω–æ–≥–æ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
def create_test_scenarios():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∞–π—Ç–æ–≤"""

    scenarios = [
        {
            "name": "Contact Form Test",
            "url": "https://www.selenium.dev/selenium/web/web-form.html",
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞ Selenium"
        },
        {
            "name": "DemoQA Practice Form",
            "url": "https://demoqa.com/automation-practice-form",
            "description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ DemoQA"
        },
        {
            "name": "HTTPBin Forms",
            "url": "https://httpbin.org/forms/post",
            "description": "HTTPBin —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞"
        }
    ]

    return scenarios


if __name__ == "__main__":
    print("üåç GEO PROXY FORM TESTER v1.0")
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫
    geo_tester = GeoProxyFormTester()

    # –í—ã–±–∏—Ä–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    scenarios = create_test_scenarios()

    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for i, scenario in enumerate(scenarios, 1):
        print(f"{i}. {scenario['name']} - {scenario['description']}")

    try:
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π (1-{len(scenarios)}) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ: ").strip()
        if not choice:
            choice = "1"

        scenario_index = int(choice) - 1
        if 0 <= scenario_index < len(scenarios):
            selected_scenario = scenarios[scenario_index]
            print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {selected_scenario['name']}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            geo_tester.run_comprehensive_geo_test(selected_scenario['url'])

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
